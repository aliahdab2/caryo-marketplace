name: CI/CD Pipeline

on:
  # For direct pushes to main (e.g. merges), only run the deployment steps
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  # For PRs, run the full test suite on PRs to main branch
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened] # Be specific about which PR events trigger the workflow
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    # Only run this job for pull_request events to main branch
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download
        
    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "21"
        cache: true

    - name: Ensure Gradle Wrapper
      working-directory: ./backend/autotrader-backend
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "gradlew script not found! Generating a new one..."
          # First try to use the Gradle CLI if available
          if command -v gradle &> /dev/null; then
            echo "Using gradle CLI to generate wrapper"
            gradle wrapper --gradle-version=8.5
          else
            # If gradle CLI isn't available, use any gradle wrapper in other projects
            echo "Trying to copy Gradle wrapper from elsewhere"
            # First look for wrapper jar
            if [ -f "../gradle/wrapper/gradle-wrapper.jar" ]; then
              echo "Found ../gradle/wrapper/gradle-wrapper.jar"
              mkdir -p ./gradle/wrapper/
              cp ../gradle/wrapper/gradle-wrapper.jar ./gradle/wrapper/
              cp ../gradle/wrapper/gradle-wrapper.properties ./gradle/wrapper/
              cp ../gradlew ./
              cp ../gradlew.bat ./
              chmod +x ./gradlew
            else
              echo "ERROR: Could not generate or find Gradle wrapper!"
              echo "Current directory structure:"
              ls -la ./
              echo "Parent directory structure:"
              ls -la ../
              exit 1
            fi
          fi
        fi
        echo "Verifying gradlew exists:"
        ls -la ./gradlew || echo "gradlew still not found!"

    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: |
        echo "DEBUG: Current directory: $(pwd)"
        echo "DEBUG: Listing ./gradle/wrapper/ before build command:"
        ls -la ./gradle/wrapper/
        echo "DEBUG: Verifying ./gradle/wrapper/gradle-wrapper.jar existence and size:"
        if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          JAR_SIZE_BUILD=$(stat --format=%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "DEBUG: ./gradle/wrapper/gradle-wrapper.jar EXISTS. Size: $JAR_SIZE_BUILD bytes."
        else
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING before build command!"
          exit 1
        fi
        
        # Run the build
        ./gradlew build --info

    - name: Run Unit Tests (excluding integration tests)
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Running unit tests (excluding integration tests)..."
        export SPRING_PROFILES_ACTIVE=unit,h2
        
        # Run tests with specific options
        ./gradlew test --info
        
        # Generate JaCoCo test coverage report
        ./gradlew jacocoTestReport --info
        
        # Display test summary
        echo "Test Summary:"
        if [ -d "build/test-results/test" ]; then
          TEST_CLASSES=$(find build/test-results/test -name "TEST-*.xml" | wc -l)
          echo "Total Test Classes: $TEST_CLASSES"
          
          # Use XML parsing fallback for test count
          echo "Using XML parsing fallback for test count:"
          find build/test-results/test -name "TEST-*.xml" | wc -l | xargs -I{} echo "Total Test Classes: {}"
          TEST_COUNT=$(grep -r "tests=" build/test-results/test --include="TEST-*.xml" | awk -F'tests="' '{sum += $2+0} END {print sum}')
          echo "Total Tests: $TEST_COUNT"
          
          FAILURES=$(grep -r "failures=" build/test-results/test --include="TEST-*.xml" | awk -F'failures="' '{sum += $2+0} END {print sum}')
          echo "Failures: $FAILURES"
        else
          echo "No test results found in build/test-results/test"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  frontend-build-and-test:
    runs-on: ubuntu-latest
    # Only run this job for pull_request events to main branch
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Frontend Build and Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        # Default values for commands and report paths are used from the action itself

  # This job runs quick tests before building/deploying for pushes to main
  main-quick-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    # Setup Gradle for Backend
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "21"
        cache: true
    
    # Run basic backend sanity check
    - name: Quick Backend Test
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Running quick sanity check for the backend code..."
        ./gradlew assemble --info
    
    # Run basic frontend sanity check
    - name: Quick Frontend Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        run-tests: 'false'  # Skip tests, just build to ensure code compiles
        
  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: [main-quick-test]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login to DockerHub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   - name: Build and push backend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./backend/autotrader-backend
  #       file: ./backend/autotrader-backend/Dockerfile
  #       push: true
  #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

  #   - name: Build and push frontend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./frontend
  #       file: ./frontend/Dockerfile
  #       push: true
  #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [main-quick-test]  # Changed from docker-build to main-quick-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services

        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa

        # ssh commands
        # ssh user@your-server "cd /path/to/app &&
        #   docker-compose pull &&
        #   docker-compose up -d"
