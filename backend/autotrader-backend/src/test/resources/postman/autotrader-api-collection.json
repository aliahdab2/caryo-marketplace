{
  "info": {
    "name": "Autotrader API",
    "description": "API collection for the Autotrader application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Reference Data",
      "item": [
        {
          "name": "Get All Active Car Brands",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10);",
                  "const randomEmail = `${randomUsername}@example.com`;",
                  "",
                  "pm.environment.set('test_username', randomUsername);",
                  "pm.environment.set('test_email', randomEmail);",
                  "pm.environment.set('test_password', 'password123');",
                  "",
                  "console.log(`Generated test user: ${randomUsername}, ${randomEmail}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Registration successful message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"successfully\");",
                  "});",
                  "",
                  "console.log(\"Registration Response:\", pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"role\": [\"user\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "signup"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.expect(jsonData.type).to.equal(\"Bearer\");",
                  "    ",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "});",
                  "",
                  "console.log(\"Login Response:\", pm.response.json());",
                  "console.log(\"Auth Token:\", pm.environment.get(\"auth_token\") ? (pm.environment.get(\"auth_token\").substring(0, 15) + \"...\") : \"none\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/signin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "signin"]
            }
          }
        }
      ]
    },
    {
      "name": "Reference Data Tests",
      "item": [
        {
          "name": "Get All Reference Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/brands/{{dynamicBrandId}}/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "brands", "{{dynamicBrandId}}", "models"]
            }
          },
          "response": []
        },
        {
          "name": "Get Models for Non-existent Brand",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 for non-existent brand\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/brands/999999999/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "brands", "999999999", "models"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Governorates",
      "item": [
        {
          "name": "Get All Governorates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Governorates have required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.include.keys('id', 'displayNameEn', 'displayNameAr', 'slug', 'countryCode', 'region', 'latitude', 'longitude');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates"]
            }
          }
        },
        {
          "name": "Get Governorate by Slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.include.keys('id', 'displayNameEn', 'displayNameAr', 'slug', 'countryCode', 'region', 'latitude', 'longitude');",
                  "    pm.expect(jsonData.slug).to.eql(pm.variables.get('governorateSlug'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/{{governorateSlug}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", "{{governorateSlug}}"]
            }
          }
        },
        {
          "name": "Get Governorate by Invalid Slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/invalid-slug",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", "invalid-slug"]
            }
          }
        },
        {
          "name": "Get Governorate by Empty Slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", ""]
            }
          }
        },
        {
          "name": "Get Governorates by Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All governorates have correct country code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(governorate) {",
                  "            pm.expect(governorate.countryCode).to.eql(pm.variables.get('countryCode'));",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/country/{{countryCode}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", "country", "{{countryCode}}"]
            }
          }
        },
        {
          "name": "Get Governorates by Invalid Country",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an empty array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array').that.is.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/country/XXX",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", "country", "XXX"]
            }
          }
        },
        {
          "name": "Get Governorates by Empty Country Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an empty array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array').that.is.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/governorates/country/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "governorates", "country", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Listings Count",
      "item": [
        {
          "name": "Get Total Listings Count",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has count property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "    pm.expect(jsonData.count).to.be.at.least(0);",
                  "});",
                  "",
                  "console.log('Total listings count:', pm.response.json().count);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/listings/count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "count"]
            }
          }
        },
        {
          "name": "Get Filtered Listings Count (Query Params)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has count property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "    pm.expect(jsonData.count).to.be.at.least(0);",
                  "});",
                  "",
                  "console.log('Filtered listings count:', pm.response.json().count);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/listings/count/filter?brandSlugs=toyota&minPrice=10000&maxPrice=50000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "count", "filter"],
              "query": [
                {
                  "key": "brandSlugs",
                  "value": "toyota"
                },
                {
                  "key": "minPrice",
                  "value": "10000"
                },
                {
                  "key": "maxPrice",
                  "value": "50000"
                }
              ]
            }
          }
        },
        {
          "name": "Get Filtered Listings Count (JSON Body)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has count property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "    pm.expect(jsonData.count).to.be.at.least(0);",
                  "});",
                  "",
                  "console.log('JSON filtered listings count:', pm.response.json().count);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brandSlugs\": [\"toyota\", \"honda\"],\n  \"minYear\": 2018,\n  \"maxYear\": 2023,\n  \"minPrice\": 15000,\n  \"maxPrice\": 45000,\n  \"locations\": [\"damascus\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/listings/count",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "count"]
            }
          }
        },
        {
          "name": "Get Count Breakdown by Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has breakdown structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('byBrand');",
                  "    pm.expect(jsonData).to.have.property('byYear');",
                  "    pm.expect(jsonData).to.have.property('byLocation');",
                  "    pm.expect(jsonData.total).to.be.a('number');",
                  "});",
                  "",
                  "console.log('Count breakdown:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"brandSlugs\": [\"toyota\"],\n  \"minYear\": 2020\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/listings/counts/breakdown",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "counts", "breakdown"]
            }
          }
        },
        {
          "name": "Get Years with Counts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an object with year counts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    // Check that all keys are valid years and values are numbers",
                  "    Object.entries(jsonData).forEach(([year, count]) => {",
                  "        pm.expect(parseInt(year)).to.be.a('number').and.to.be.at.least(1900);",
                  "        pm.expect(count).to.be.a('number').and.to.be.at.least(0);",
                  "    });",
                  "});",
                  "",
                  "console.log('Years with counts:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/listings/counts/years?brandSlugs=toyota",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "counts", "years"],
              "query": [
                {
                  "key": "brandSlugs",
                  "value": "toyota",
                  "description": "Optional: filter by brand"
                }
              ]
            }
          }
        },
        {
          "name": "Get Brands with Counts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an object with brand counts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    // Check that all values are numbers >= 0",
                  "    Object.values(jsonData).forEach(count => {",
                  "        pm.expect(count).to.be.a('number').and.to.be.at.least(0);",
                  "    });",
                  "});",
                  "",
                  "console.log('Brands with counts:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/listings/counts/brands?minYear=2020",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "counts", "brands"],
              "query": [
                {
                  "key": "minYear",
                  "value": "2020",
                  "description": "Optional: filter by minimum year"
                }
              ]
            }
          }
        },
        {
          "name": "Get Models with Counts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an object with model counts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    // Check that all values are numbers >= 0",
                  "    Object.values(jsonData).forEach(count => {",
                  "        pm.expect(count).to.be.a('number').and.to.be.at.least(0);",
                  "    });",
                  "});",
                  "",
                  "console.log('Models with counts:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/listings/counts/models?brandSlugs=toyota",
              "host": ["{{baseUrl}}"],
              "path": ["api", "listings", "counts", "models"],
              "query": [
                {
                  "key": "brandSlugs",
                  "value": "toyota",
                  "description": "Optional: filter by brand"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
